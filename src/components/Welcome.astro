---
import folder from '../assets/folder.svg';
import folder_yellow from '../assets/folder_yellow.svg';
import open_folder from '../assets/open_folder.svg';
import open_folder_yellow from '../assets/open_folder_yellow.svg';
import right_arrow from '../assets/right_arrow.svg';
import right_arrow_long from '../assets/right_arrow_long.svg';
import arrow from '../assets/arrow.svg';
import arrow_with_line from '../assets/arrow_with_line.svg';

---




<div id="container">
	<div class = "content">
		<div class="navbar">
			<a class="nav_item" target = "_blank" href="https://github.com/Gkhech"> 
				Github
			</a>
			<a class="nav_item" target = "_blank" href="https://www.linkedin.com/in/gor-khechyan-912a4821a/"> 
				Linkedin
			</a>
			<a class="nav_item end" href="/about"> 
				About
			</a>
		</div>
		<div class="title" >Gor_Khechyan</div>
		<div class="position" >Software_Engineer</div>
		
		<div class="inner"> 
			<div class="intro">
				Welcome to my portfolio :)
			</div>
			<div class="instructions">
				you can click on the directories or use the terminal
			</div>


			<div class="directory top" data-folder="closed"> 
				gors_desktop <div id = "gors_desktop" class="folder_icon" data-folder="closed" />
			</div>
		
			<div class="row" data-folder="closed">
				<div class="line"> 
				</div>
				<div class="col">
					
						<div class = "directory_container lvl1" id="lvl1_top" data-folder="closed"> 
							<img class="right_arrow" src={right_arrow.src} alt="right arrow" />
							<div class="directory"> 
								personal_projects <div id = "personal_projects" class="folder_icon" data-folder="closed" />
							</div>
						</div>
						
						<div class="row inside lvl2 " data-folder="closed">
							<div class="line2"> 
							</div>
							<div class="col">

								<!-- <div class="col directory_hold"> -->
									<div class = "directory_container" id="top"> 
											<img class="right_arrow" src={right_arrow.src} alt="right arrow" />
											<div class="directory"> 
												plant_dad.txt<div class="folder_icon" data-folder="closed" />
											</div>

											
									</div>

									<div class = "project_overview_container"  id = "plant_dad">
										<div class = "project_overview" >tech_stack : Nextjs, NestJs, Clerk, React, Tailwindcss, Typescript, Postgres, Redis, OpenAI, Google Cloud Storage, PlantNet API, Git</div>
										<div class = "project_overview" >project_overview : Full-stack Houseplant maintenance web app using fine-tuned LLM models and plantNet for plant identification and tailored care suggestions. Features a simple, user-friendly interface to view all your plants and track their health.</div>
									</div>


									<div class = "directory_container"> 
										<img class="right_arrow" src={right_arrow.src} alt="right arrow" />
										<div class="directory"> 
											uic_api.txt<div class="folder_icon" data-folder="closed" />
										</div>
									</div>

									<div class = "project_overview_container"  id = "uic_api">
										<div class = "project_overview" >tech_stack : Astro, Go, Auth0, React, Typescript, Postgres, Redis, Graphviz, Git </div>
										<div class = "project_overview" >project_overview : Full-stack RESTful API for developers building solutions with UIC grade distribution, lecture, and professor data. Project features user authentication and generates visual graphs of class prerequisites using Graphviz for clear dependency visualization.</div>
									</div>

								<div class = "project_overview_container"  class = "directory_container"> 
									<img class="right_arrow" src={right_arrow.src} alt="right arrow" />
									<div class="directory"> 
										interview_diver.txt<div class="folder_icon" data-folder="closed" />
									</div>
								</div>

								<div class = "project_overview_container"  id = "interview_diver">
									<div class = "project_overview" >tech_stack : Nextjs, Express, React, Tailwindcss, Typescript, Redis, OpenAI, Git</div>
									<div class = "project_overview" >project_overview : Web app that allows individuals to practice behavioral interviews with tailored feedback. </div>
								</div>

								<div class = "directory_container"> 
									<img class="right_arrow" src={right_arrow.src} alt="right arrow" />
									<div class="directory"> 
										word_game.txt<div class="folder_icon" data-folder="closed" />
									</div>
								</div>

								<div class = "project_overview_container" id = "word_game">
									<div class = "project_overview" >tech_stack : Maven, Java, Git </div>
									<div class = "project_overview" >project_overview: Built a client-server word game where multiple clients can connect to the server and play their own individual games simultaneously. Each client session runs independently, allowing users to play without affecting others.</div>
								</div>

								<div class = "directory_container"> 
									<img class="right_arrow" src={right_arrow.src} alt="right arrow" />
									<div class="directory"> 
										assembly_language_interpreter.txt<div class="folder_icon" data-folder="closed"/>
									</div>
								</div>

								<div class = "project_overview_container"  id = "ali">
									<div class = "project_overview" >tech_stack : C++, Git</div>
									<div class = "project_overview" >project_overview : A project that simulates an assembly-like instruction set with operations like DEC, LDA, LDI, STR, ADD, and SUB, using the command pattern for dynamic execution. It manages an accumulator, data register, and memory for data storage and manipulation.</div>
								</div>

								<div class = "directory_container" id="bottom"> 
									<img class="right_arrow" src={right_arrow.src} alt="right arrow" />
									<div class="directory"> 
										open_street_maps.txt<div class="folder_icon" data-folder="closed" />
									</div>
								</div>

								<div class = "project_overview_container"  id = "open_street_maps">
									<div class = "project_overview" >tech_stack : C++, Google Test, Git </div>
									<div class = "project_overview" >project_overview : Developed a custom Dijkstra algorithm to find the shortest path using data points from the UIC campus. Utilized Google test to ensure proper functionality.</div>
								</div>

							</div>

							
						</div>
						
					<div class = "directory_container lvl1" id="lvl1_bottom" data-folder="closed"> 
						<img class="right_arrow" src={right_arrow.src} alt="right arrow" />
						<a class = "directory" target = "_blank" href="https://drive.google.com/file/d/1ABNumKgpDbWP7AUFDB4uL7UODojpNrFE/view?usp=sharing"> 
							resume <div class="circle" />
						</a>
						
					</div>
					
					
				</div>
			</div>

		

			<div class="matches"> 
			</div>

			<div id="mydiv">
				<div id="mydivheader">
					<button class = "minimize_button"></button>
						<div class = "terminal_title"> gors -- zsh </div>
						<div class = "space"></div>
				</div>
				<div class = "terminal_container">
					<div class = "terminal_inner"> 

					<div class = "console_container">						
						<div class="terminal_line">
							<div class="input" contenteditable="false" spellcheck="false" data-prompt="gor@Gors-MacBook-Pro-3 ~ % "></div>
						</div>
					</div>

					</div>
				</div>
			</div>

			<div class="minimized_terminal"/> 

		</div>

	</div>
</div>

<script>
	let curr_dir = "gor";
	let matches: any = document.querySelector<HTMLElement>('.matches');

	interface ParentAndChild{
		parent: string,
		children: Map<string, ParentAndChild>,
	}

	const personal_projects_map: Map<string, ParentAndChild> = new Map();
	personal_projects_map.set("plant_dad.txt", {parent: "personal_projects", children: new Map()});
	personal_projects_map.set("uic_api.txt", {parent: "personal_projects", children: new Map()});
	personal_projects_map.set("word_game.txt", {parent: "personal_projects", children: new Map()});
	personal_projects_map.set("assembly_language_interpreter.txt", {parent: "personal_projects", children: new Map()});
	personal_projects_map.set("open_street_maps.txt", {parent: "personal_projects", children: new Map()});
	
	const resume_map: Map<string, ParentAndChild> = new Map();

	const gors_desktop_map:  Map<string, ParentAndChild> = new Map()
	gors_desktop_map.set("personal_projects", {parent: "gors_desktop", children: personal_projects_map});
	gors_desktop_map.set("resume", {parent: "gors_desktop", children: resume_map});

	const gor_map:  Map<string, ParentAndChild> = new Map()
	gor_map.set("gors_desktop", {parent: "gor", children: gors_desktop_map});
		
	const tree: Map<string, ParentAndChild> = new Map();
	tree.set("gor", {parent: "/", children: gor_map})

	//				if(operation == "cd" && tree.has(curr_dir) && tree.get(curr_dir)?.children.has(command)){
	const parent_map = new Map();
	parent_map.set("gor", "");
	parent_map.set("gors_desktop", "gor");
	parent_map.set("personal_projects", "gors_desktop");
	parent_map.set("resume", "gors_desktop");

	parent_map.set("plant_dad.txt", "personal_projects");
	parent_map.set("uic_api.txt", "personal_projects");
	parent_map.set("word_game.txt", "personal_projects");
	parent_map.set("assembly_language_interpreter.txt", "personal_projects");
	parent_map.set("open_street_maps.txt", "personal_projects");

	interface ProjectInfo {
		tech_stack: string,
		project_overview: string,
	}

	const file_map = new Map<string, ProjectInfo>();
	file_map.set("resume", {
		tech_stack: "tech_stack : Nextjs, NestJs, Clerk, React, Tailwindcss, Typescript, Postgres, Redis, OpenAI, Google Cloud Storage, PlantNet AP, Git", 
		project_overview: "Full-stack Houseplant maintenance web app using fine-tuned LLM models and plantNet for plant identification and tailored care suggestions. Features a simple, user-friendly interface to view all your plants and track their health."
	});

	file_map.set("plant_dad.txt", {
		tech_stack: "tech_stack : Nextjs, NestJs, Clerk, React, Tailwindcss, Typescript, Postgres, Redis, OpenAI, Google Cloud Storage, PlantNet AP, Git", 
		project_overview: "project_overview : Full-stack Houseplant maintenance web app using fine-tuned LLM models and plantNet for plant identification and tailored care suggestions. Features a simple, user-friendly interface to view all your plants and track their health."
	});

	file_map.set("uic_api.txt",  {
		tech_stack: "tech_stack : Astro, Go, Auth0, React, Typescript, Postgres, Redis, Graphviz, Git", 
		project_overview: "project_overview : Full-stack RESTful API for developers building solutions with UIC grade distribution, lecture, and professor data. Project features user authentication and generates visual graphs of class prerequisites using Graphviz for clear dependency visualization."
	});

	file_map.set("word_game.txt", {
		tech_stack: "tech_stack : Maven, Java, Junit, Git", 
		project_overview: "project_overview: Built a client-server word game where multiple clients can connect to the server and play their own individual games simultaneously. Each client session runs independently, allowing users to play without affecting others."
	});
	file_map.set("assembly_language_interpreter.txt",  {
		tech_stack: "tech_stack: C++, Git",
		project_overview: "project_overview : A project that simulates an assembly-like instruction set with operations like DEC, LDA, LDI, STR, ADD, and SUB, using the command pattern for dynamic execution. It manages an accumulator, data register, and memory for data storage and manipulation."
	});
	file_map.set("open_street_maps.txt",  {
		tech_stack: "C++, Google Test, Git", 
		project_overview: "project_overview : Developed a custom Dijkstra algorithm to find the shortest path using data points from the UIC campus. Utilized Google test to ensure proper functionality."
	});

	const elements = [
		"gor", 
		"gors_desktop",
		"personal_projects",
		"resume",
		"plant_dad.txt",
		"uic_api.txt",
		"word_game.txt",
		"assembly_language_interpreter.txt",
		"open_street_maps.txt"
	]


	

	function calcLine2(){
		const lvl2 = document.querySelector<HTMLElement>(".lvl2");
		if(lvl2){
		const plantDad = lvl2.querySelector("#top");
			const open_street_maps = lvl2.querySelector("#bottom")
			if (plantDad && open_street_maps) {
				const rect = plantDad.getBoundingClientRect();
				const yPosition = rect.top + window.scrollY;

				const rect2 = open_street_maps.getBoundingClientRect();
				const yPosition2 = rect2.top + window.scrollY;
				const line2 = document.querySelector<HTMLElement>(".line2");
				if(line2){
					line2.style.height = `${(yPosition2 - yPosition) + 47}px`;
				}
			}
		}
	}

	function calcLine1(lineExtension: number){
		console.log("lineExtension", lineExtension);
		const top = document.getElementById("lvl1_top");
		const bottom = document.getElementById("lvl1_bottom")
		if (top && bottom) {
			const rect = top.getBoundingClientRect();
			const yPosition = rect.top + window.scrollY;

			const rect2 = bottom.getBoundingClientRect();
			const yPosition2 = rect2.top + window.scrollY;
			const line2 = document.querySelector<HTMLElement>(".line");
			if(line2){
				line2.style.height = `${(yPosition2 - yPosition) + lineExtension}px`;
				console.log("line2.style.height", yPosition2, yPosition);
			}
		}
	}

	function toggleFolder(folder: HTMLElement | null){
		if(folder){
			if(folder.dataset.folder == "closed"){
				folder.style.setProperty(
					'background-image',
					'url("src/assets/open_folder_yellow.svg")',
					'important'
				) 
				folder.dataset.folder = "open";
			}else{
				folder.style.setProperty(
					'background-image',
					'url("src/assets/folder.svg")',
					'important'
				)
				folder.dataset.folder = "closed";
			}
		}
	}


	document.querySelectorAll<HTMLElement>(".directory_container")?.forEach((ele) => {
		ele.addEventListener('click', (e) => {
			const proj_overview_container = ele.nextElementSibling as HTMLElement; // .directory_hold
			
			toggleFolder(ele.querySelector<HTMLElement>(".folder_icon"));

			if (proj_overview_container?.classList.contains("project_overview_container")) {//validate
				if (proj_overview_container) {
					proj_overview_container.style.display = (proj_overview_container.style.display === "none" || !proj_overview_container.style.display) ? "block" : "none";
				}
			}
			calcLine2();
			calcLine1(46.5);
		});
	})

	function getCaretCoordinates(): { x: number; y: number } | null {
		const selection = window.getSelection();
		if (!selection || selection.rangeCount === 0) return null;

		const range = selection.getRangeAt(0).cloneRange();
		range.collapse(true);

		const rects = range.getClientRects();
		if (rects.length === 0) return null;

		const rect = rects[0];
		return { x: rect.left, y: rect.top };
	}

	
	

	dragElement(document.getElementById("mydiv"));
	const content =  document.querySelector<HTMLElement>(".content");
	let contentInnerWidth: number;

	function updateContentInnerWidth(){
		contentInnerWidth = window.innerWidth;
		calcLine2();
		!getComputedStyle(document.querySelector<HTMLElement>(".folder_icon")!).backgroundImage.includes("open_folder_yellow.svg") ? 
			calcLine1(0)
		:
			calcLine1(46.5);
	}

	let i = 1;
	matches.addEventListener("focusin", (e: any) => {
		console.log("A child inside .matches received focus");

		if(matches){
			const size = matches.childElementCount;
			console.log("size", size)
				matches.onkeydown = function(event: any) {	
					console.log("index", i)			
					if(event.key == "ArrowDown") {
						if(i >= size) return
						i += 1;
						console.log('down');
						document.getElementById(`${i}`)?.focus();	
					}
					
					if(event.key == "ArrowUp") {
						if(i <= 1) return
						i  -= 1;
						console.log('up');
						document.getElementById(`${i}`)?.focus();
					}

					if(event.key == "Escape" || event.key == "Esc") {
						console.log("esc")
						event.preventDefault();
						const input_div = document.querySelector<HTMLElement>('.input');
						if(input_div){
							input_div.focus();
							matches.style.display = "none";
						}
					}

					if(event.key == "Enter"){
						console.log("in matches enter")
						event.preventDefault();
						const input_div = document.querySelector<HTMLElement>('.input');
						const commandText = input_div?.innerHTML;
						const commandTextSplit = commandText?.split(" ");
						commandTextSplit![commandTextSplit!.length - 1] = document.getElementById(`${i}`)?.innerHTML || " ";
						console.log(commandTextSplit)
						input_div!.innerHTML = commandTextSplit!.join(" ");
						/*
							✅ inputEl.focus();
							Purpose: Puts the keyboard focus on the .input element.

							Why it's needed: You must focus the element before manipulating the caret/selection, or the selection APIs might not work as expected.

							✅ const range = document.createRange();
							Creates a new Range object.

							A Range represents a portion of the DOM (like text or elements).

							Think of it like marking a span of text with a highlighter — you're defining where a selection starts and ends.

							✅ range.selectNodeContents(inputEl);
							Tells the range to cover the entire contents of the .input element.

							If .input has text like "hello world", the range now spans from just before h to just after d.

							✅ range.collapse(false);
							This collapses the range to a single caret position.

							false means collapse to the end of the range (after the last character).

							(true would collapse to the start.)

							This is what moves the caret to the end of the content.

							✅ const selection = window.getSelection();
							Gets the current text selection object for the page.

							This lets you manipulate the caret position or selected text in the document.

							✅ selection.removeAllRanges();
							Clears any existing selections/carets in the document.

							If the user had anything selected, it is now cleared.

							✅ selection.addRange(range);
							Applies the range we created above (collapsed to the end).

							This places the caret at the end of the content in .input.
						*/					

						// Move cursor to end -- logic
							input_div!.focus();
							const range = document.createRange();
							range.selectNodeContents(input_div!);
							range.collapse(false); // set the carot to the end of the range after the end

							const selection = window.getSelection();
							if (selection) {
								selection.removeAllRanges();
								selection.addRange(range);
							}
						//

						matches.style.display = "none";

					}
				};
				
			}
		});


	window.addEventListener('DOMContentLoaded', (e: any) => {
		
		// Select the node that will be observed for mutations
		const targetNode = document.querySelector<HTMLElement>(".input");
		
		if (targetNode) {
			targetNode.addEventListener("input", () => {
				const caret = getCaretCoordinates();
				if (caret) {
					const matches = document.querySelector<HTMLElement>(".matches");
					if (matches) {
						matches.style.left = `${caret.x + window.scrollX}px`;
						matches.style.top = `${caret.y + 20 + window.scrollY}px`; // 20px offset to appear below caret
					}

				}
			});
		}
		});

	updateContentInnerWidth();
	
	window.addEventListener("resize", updateContentInnerWidth);



	function dragElement(elmnt: any) {
		var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
		if (document.getElementById(elmnt.id + "header")) {
    // if present, the header is where you move the DIV from:
    document.getElementById(elmnt.id + "header")!.onmousedown = dragMouseDown;
		} else {
			// otherwise, move the DIV from anywhere inside the DIV:
			elmnt.onmousedown = dragMouseDown;
		}

		function dragMouseDown(e: any) {
			e = e || window.event;
			e.preventDefault();
			// get the mouse cursor position at startup:
			pos3 = e.clientX;
			pos4 = e.clientY;
			document.onmouseup = closeDragElement;
			// call a function whenever the cursor moves:
			document.onmousemove = elementDrag;
		}

		function getOffset( el: any ) {
    var _x = 0;
    var _y = 0;
    while( el && !isNaN( el.offsetLeft ) && !isNaN( el.offsetTop ) ) {
        _x += el.offsetLeft - el.scrollLeft;
        _y += el.offsetTop - el.scrollTop;
        el = el.offsetParent;
    }
    return { top: _y, left: _x };
}

		function elementDrag(e: any) {
			e = e || window.event;
			e.preventDefault();
			// calculate the new cursor position:
			pos1 = pos3 - e.clientX;
			pos2 = pos4 - e.clientY;
			pos3 = e.clientX;
			pos4 = e.clientY;


			// set the element's new position:
			const nextLeft = elmnt.offsetLeft - pos1;
			const nextTop = elmnt.offsetTop - pos2;
			if(nextLeft <= (contentInnerWidth - (75 * 2)) &&  nextLeft >= 0 + 75 ){
				elmnt.style.left = nextLeft + "px";
			}
			if(nextTop <= (content!.scrollHeight - 575) && nextTop >= 0 - 50){
				elmnt.style.top = nextTop + "px";
			}	
		}

		function closeDragElement() {
			/* stop moving when mouse button is released:*/
			document.onmouseup = null;
			document.onmousemove = null;
		}
	}


		function closeLvl1v2(gors_desktop_folder: HTMLElement, lvl1: NodeListOf<HTMLElement>, folder_icon: NodeListOf<HTMLElement>){
			folder_icon?.forEach((folder) => {
				folder.style.setProperty(
					'background-image',
					'url("src/assets/folder.svg")',
					'important'
				)
				folder.dataset.folder = "closed";
			})

			lvl1.forEach((ele) => {
				ele.setAttribute("style", "display: none !important;") 	
			});	

			gors_desktop_folder.dataset.folder = "closed";
			gors_desktop_folder.style.setProperty(
				'background-image',
				'url("src/assets/folder.svg")',
				'important'
			)
			calcLine1(0);
	}

	function openLvl1v2(){

		const gors_desktop_folder = document.querySelector<HTMLElement>("#gors_desktop");
	
		const lvl2 = document.querySelector<HTMLElement>('.lvl2');

		

		const folder_icon = document.querySelectorAll<HTMLElement>('.folder_icon');
		const lvl1 = document.querySelectorAll<HTMLElement>('.lvl1');
		
		
		if(lvl1 && gors_desktop_folder){
			console.log("PREE", gors_desktop_folder.dataset.folder)
	

		console.log("lvl1", lvl1);
			lvl1.forEach((ele) => {
				ele.setAttribute("style", "display: flex !important;") 
			});	

			gors_desktop_folder.dataset.folder = "open";
			gors_desktop_folder.style.setProperty(
				'background-image',
				'url("src/assets/open_folder_yellow.svg")',
				'important'
			);
			calcLine1(46.5);
		}
	}



	function toggleLvl1(){
		const gors_desktop_folder = document.querySelector<HTMLElement>("#gors_desktop");
	
		const lvl2 = document.querySelector<HTMLElement>('.lvl2');

		

		const folder_icon = document.querySelectorAll<HTMLElement>('.folder_icon');
		const lvl1 = document.querySelectorAll<HTMLElement>('.lvl1');
		
		
		if(lvl1 && gors_desktop_folder){
			console.log("PREE", gors_desktop_folder.dataset.folder)
			if(gors_desktop_folder.dataset.folder == "closed" || gors_desktop_folder.dataset.folder == "selected"){
				console.log("called open lvl1")
				openLvl1v2()
			}else{
				closeLvl1v2(gors_desktop_folder, lvl1, folder_icon)
				if(lvl2){
					closelvl2v2(lvl2);
				}
			}
		}
	}

	document.querySelector('.directory.top')?.addEventListener('click', () => {
		toggleLvl1();//open first so we can calc distance
	});

	function closelvl2v2(inside: HTMLElement){
		
		inside.setAttribute("style", "display: none !important")
		document.querySelectorAll<HTMLElement>(".directory_container")?.forEach((ele) => {
			const proj_overview_container = ele.nextElementSibling as HTMLElement; // .directory_hold
			
			const folder = ele.querySelector<HTMLElement>(".folder_icon");
			if(folder){
				folder.style.setProperty(
					'background-image',
					'url("src/assets/folder.svg")',
					'important'
				)
				folder.dataset.folder = "closed";
			}
		
			if (proj_overview_container?.classList.contains("project_overview_container")) {//validate
				if (proj_overview_container) {
					proj_overview_container.style.display = "none";
				}
			}
		})
		inside.dataset.folder = "closed";
		calcLine2();		
	}

	function openlvl2v2(inside: HTMLElement){
		inside.setAttribute("style", "display: flex !important")
		inside.dataset.folder = "open";
		calcLine2();		
	}

	function toggleLvl2(){
		const inside = document.querySelector<HTMLElement>('.lvl2');
					
		if(inside){	
			if(inside.dataset.folder == "closed"){
				openlvl2v2(inside);
			}
			else{
				closelvl2v2(inside);
			}
		}	
	}


	const lvl1 = document.querySelector('.lvl1');
	lvl1?.addEventListener('click', () => {
    // const inside = document.querySelector('.inside');
		toggleLvl2()
		calcLine1(46.5);
  });
		

		
		const terminal_input = document.querySelector<HTMLElement>('.input');


		const terminal = document.querySelector<HTMLElement>('.terminal_container');
		const terminal_inner = terminal?.querySelector<HTMLElement>('.terminal_inner')
		const terminal_title = document.querySelector<HTMLElement>(".terminal_title");
		const minimized_header = document.getElementById('mydivheader');
		const minimized_terminal = document.querySelector<HTMLElement>('.minimized_terminal');

		minimized_terminal?.addEventListener('click', () => {
			if(minimized_header && terminal && terminal_inner && minimize_button && terminal_title)
			{
				console.log("hellof")
				terminal.style.display = "flex";
				terminal_inner.style.display = "block";
				terminal.style.width = "800px";
				terminal.style.height = "500px";
				minimized_header.style.width = "100%";
				minimized_header.style.height = "50px";
				minimized_header.style.backgroundColor = "white";
				minimized_header.style.display = "flex";
				minimize_button.style.display = "block";
				terminal_title.style.display = "block";
				terminal.style.transition = "all 0.3s ease-in-out";

			}
		});


		const minimize_button = document.querySelector<HTMLElement>('.minimize_button');
		const header = document.getElementById('mydivheader');
			console.log(minimize_button)
		minimize_button?.addEventListener('click', (e) => {
			e.stopPropagation(); // to stop it from clicking outer terminal container

			if(terminal && terminal_inner && terminal_input && header && terminal_title){
				// minimize_button.style.display = "none";
				terminal_inner.style.display = "none";
				terminal.style.display = "none";
				header.style.display = "none";

				header.style.width = "150px";
				header.style.height = "150px";
				minimize_button.style.display = "none";
				terminal_title.style.display = "none";
			}
		});


		terminal_input?.addEventListener("focus", (e) => {
			if(terminal_input && terminal_input.textContent == ""){
				terminal_input.textContent = " ";
			}
		});

	

		window.addEventListener('DOMContentLoaded', () => {
		const inputEl = document.querySelector('.input');//i donrt even know if this si hlping
		if (inputEl && terminal_input) {//to ensure prev content doesnt get erased
			terminal_input.textContent = " ";//this seem to have fix the inital issue wher i could delete all the spaces
			inputEl.setAttribute('contenteditable', 'true');
			
		}
	});

	function toggleSelectedFolder(folder: HTMLElement | null){
		if(folder){
			if(folder.dataset.folder === "closed"){
				console.log(getComputedStyle(folder).backgroundImage)
				folder.style.setProperty(
					'background-image',
					'url("src/assets/folder_yellow.svg")',
					'important'
				) 	
				folder.dataset.folder = "selected";
			} else{
				console.log(getComputedStyle(folder).backgroundImage)
				folder.style.setProperty(
					'background-image',
					'url("src/assets/folder.svg")',
					'important'
				) 	
				folder.dataset.folder = "closed";
			}
		}
	}

		function traverse(): Map<string, ParentAndChild>{
			let hold: Map<string, ParentAndChild> = tree;
			let current_map;
			const queue = [];
			queue.push(tree);
			let size = 1;
			while(queue.length != 0){
				size = queue.length;
				for(let i = 0; i < size; i++){
					current_map = queue.pop();
					if(current_map?.size == 0) continue;

					for (const [key, value] of current_map!.entries()) {
						if (key === curr_dir) {
							console.log("found value", value.children, " key ", key);
							return value.children; // ✅ now exits traverse
						}
						queue.unshift(value.children);
					}
				}
				

			}

			return hold;
		}
	

		// case "ArrowDown":
		// event.preventDefault();
		let commandTextSplit: string[] = [];
		const newLine = document.createElement("div");

		function returnAllElementStartWith(input: string): string[] {
			return elements.filter((ele) => 
				ele.startsWith(input)
			)
		}

		function addToHistory(commandText: string, commandTrimAll: string[], historyContainer: HTMLElement, terminal_input: HTMLElement){
			console.log("new dir found");
			const newLine = document.createElement("div");

			newLine.style.color = "white";
			newLine.style.whiteSpace = "pre-wrap";
			newLine.style.wordBreak = "break-all";
			newLine.style.margin = "0px 10px 0px 10px";
			newLine.style.display = "inline-block";
			// Set content
			
			newLine.innerHTML = `<div>gor@Gors-MacBook-Pro-3 ${curr_dir == "gor" ? "~" : curr_dir} %${commandText}</div>`;

			historyContainer.insertBefore(newLine, terminal_input.parentElement);

			curr_dir = commandTrimAll[commandTrimAll.length - 1];

			// Reset input
			terminal_input.textContent = " ";
			terminal_input.dataset.prompt = `gor@Gors-MacBook-Pro-3 ${curr_dir == "gor" ? "~" : curr_dir} % `;
			// Scroll to bottom if needed
			historyContainer.scrollTop = historyContainer.scrollHeight;
		}

		terminal_input?.addEventListener(
			"keydown",
			(event) => {
				if (event.defaultPrevented) {
					return; // Do nothing if the event was already processed
				}

				if (event.metaKey) {
					event.preventDefault();
					return;
				}

				switch (event.key) {						
					case "Meta":
						event.preventDefault();
						return
					case "Tab"://this is our autocomplete
						const commandText = terminal_input.textContent || " ";//the bare input text
						let commandTrimStart = commandText.trimStart().split(" ");//the input text without any white space at the start and split
						let commandTrimAll = commandText.trim().split(" ");//the input text without any white space and split

						// if(commandText.trimStart() != commandText.trim() && commandTrimAll.length != 1 && commandTrimAll[0] != 'cd'){
						// 	console.log(commandText.trimStart(), "eqaul", commandText.trim());
						// 	event.preventDefault();
						// 	break;
						// }
						// commandTrimStart = commandTrimStart.filter((ele) => {
						// 	if(ele != "") return ele
						// })

						commandTrimAll = commandTrimAll.filter((ele) => {
							if(ele != "") return ele
						})

						console.log("commandTrimStart", commandTrimStart)
						console.log("commandTrimAll", commandTrimAll)

						

						if(commandTrimAll.length == 1 && commandTrimStart.length == 1){
							console.log("just cd or ls -> one word")
							//we have just cd or ls no leading spaces
						}
						else if(commandTrimStart.length >= 1 && (commandTrimStart[0] == "cd" || commandTrimStart[0] == "cat") ){//changed to >= 1 instead of == 1
							//there are leading spaces 
							console.log("leading spaces")
							let command = "";
							command = commandTrimStart[1];
							

							
							for (const [index, value] of commandTrimStart.entries()) {
								if(index == 0) continue;
								console.log("index", index, " value", value);
								if(value != ""){
									console.log(commandTrimStart.slice(index).join(""))
									command = commandTrimStart.slice(index).join(",");
									break;
								}
							}
												

							const hold: Map<string, ParentAndChild> = traverse();//returns the child of a key that matches our current directory 
							console.log("returned", hold, "command", command);

							const allElementsStartWith: string[] = returnAllElementStartWith(command);
							console.log("allElementsStartWith", allElementsStartWith)
							
							let filtered: string[] = [];
							if(commandTrimStart[0] == "cd"){
								filtered = allElementsStartWith.filter((ele) => {
									if(hold.has(ele) && !ele.endsWith(".txt")){
										return ele;
									}
								})
							}else if(commandTrimStart[0] == "cat"){
								filtered = allElementsStartWith.filter((ele) => {
									if(hold.has(ele) && ele.endsWith(".txt")){
										return ele;
									}
								})
							}

							
							console.log("filtered", filtered)
							if(filtered.length >= 1){
								const children: HTMLElement[] = filtered.map((ele , index) => {
									const autocomplete_option_div = document.createElement("button");
									autocomplete_option_div.id = `${index + 1}`
									autocomplete_option_div.innerHTML = ele;
									return autocomplete_option_div;
								});

								matches = document.querySelector<HTMLElement>('.matches');
								if (matches) {
									matches.replaceChildren();
									children.forEach(child => matches.appendChild(child));
								}



								if(matches)
									matches.style.display = "flex";

								const button = matches?.querySelector("button");
								console.log("button", button)

								if(button){
									setTimeout(() => {
										button?.focus();
									}, 0);
								}
							}
						}
						
						event.preventDefault();
						break;
					case "Enter":
						console.log("IN KEYDOWN ENTER")
						const historyContainer = document.querySelector<HTMLElement>('.console_container');

						if (historyContainer && terminal_input) {
							//! prev issue 
							//!If you're using Astro, Next.js, or a framework that scopes CSS using data-* attributes (like your data-astro-cid-...), 
							//!then dynamically added elements do not automatically get those scoped attributes.

							const commandText = terminal_input.textContent || " ";
							const commandTrimStart = commandText.trimStart().split(" ");
							let commandTrimAll = commandText.trim().split(" ");

							const newLine = document.createElement("div");

							console.log("*", commandTextSplit, "*");
							const hold: Map<string, ParentAndChild> = traverse();//returns the child of a key that matches our current directory 
							console.log("before returned", hold, "command*", commandTrimAll, "*hold.has", hold.has(commandTrimAll[1]));
							
							commandTrimAll = commandTrimAll.filter((ele) => {
								if(ele != "") return ele
							})

							console.log("after trim returned", hold, "command*", commandTrimAll, "*hold.has", hold.has(commandTrimAll[1]));
							if(commandTrimAll.length == 1 && commandTrimAll[0] == "ls"){
								newLine.style.color = "white";
								newLine.style.whiteSpace = "pre-wrap";
								newLine.style.wordBreak = "break-all";
								newLine.style.margin = "0px 10px 0px 10px";
								newLine.style.display = "inline-block";
								newLine.style.width = "100%";

								// Set content
								
								newLine.innerHTML = `<div>gor@Gors-MacBook-Pro-3 ${curr_dir == "gor" ? "~" : curr_dir} %${commandText}</div>`;
							
								historyContainer.insertBefore(newLine, terminal_input.parentElement);

								for (const [key, value] of hold!.entries()) {
									
									const newDiv = document.createElement("span");
									newDiv.innerHTML = key;
									newDiv.style.color = "#FF98EA";
									newDiv.style.whiteSpace = "pre-wrap";
									newDiv.style.wordBreak = "break-all";
									newDiv.style.margin = "0px 10px 0px 10px";
									newDiv.style.display = "inline-block";
									newDiv.style.width = "100%";
									historyContainer.insertBefore(newDiv, terminal_input.parentElement);
								}

								// Reset input
								terminal_input.textContent = " ";
								terminal_input.dataset.prompt = `gor@Gors-MacBook-Pro-3 ${curr_dir == "gor" ? "~" : curr_dir} % `;
								// Scroll to bottom if needed
								historyContainer.scrollTop = historyContainer.scrollHeight;
							}
							else if(commandTrimAll[0] == "cat" && hold.has(commandTrimAll[1]) && commandTrimAll[1].endsWith(".txt") && file_map.has(commandTrimAll[1]) && commandTrimAll.length == 2){
								console.log("in cat")

								
								newLine.style.color = "white";
								newLine.style.whiteSpace = "pre-wrap";
								newLine.style.wordBreak = "break-all";
								newLine.style.margin = "0px 10px 0px 10px";
								newLine.style.display = "inline-block";
								newLine.style.width = "100%";

								// Set content
								
								newLine.innerHTML = `<div>gor@Gors-MacBook-Pro-3 ${curr_dir == "gor" ? "~" : curr_dir} %${commandText}</div>`;
								const project_tech_stack_div = document.createElement("div");
								const project_overview_div = document.createElement("div");
								
								project_tech_stack_div.innerHTML = `
									<div>${file_map.get(commandTrimAll[1])?.tech_stack}</div>
								`;

								project_overview_div.innerHTML = `
									<div>${file_map.get(commandTrimAll[1])?.project_overview}</div>
								`;

								Object.assign(project_tech_stack_div.style, {
									color: "#FF98EA",
									whiteSpace: "normal",
									wordBreak: "break-word",
									display: "block",
									width: "85%",
									margin: "0 auto", // ✅ centers the div
									marginBottom: "10px",
									marginTop: "10px",
								});

								Object.assign(project_overview_div.style, {
									color: "#FF98EA",
									whiteSpace: "normal",
									wordBreak: "break-word",
									display: "block",
									width: "85%",
									margin: "0 auto", // ✅ centers the div
									marginBottom: "10px",
								});
								

								historyContainer.insertBefore(newLine, terminal_input.parentElement);
								historyContainer.insertBefore(project_tech_stack_div, terminal_input.parentElement);
								historyContainer.insertBefore(project_overview_div, terminal_input.parentElement);


								// Reset input
								terminal_input.textContent = " ";
								terminal_input.dataset.prompt = `gor@Gors-MacBook-Pro-3 ${curr_dir == "gor" ? "~" : curr_dir} % `;
								// Scroll to bottom if needed
								historyContainer.scrollTop = historyContainer.scrollHeight;
							}
							else if(commandTrimAll[0] == "cd" && commandTrimAll[1] == ".."){
								console.log("in cd ..")
								// curr_dir =  parent_map.get(curr_dir);
								// commandTrimAll[commandTrimAll.length - 1] = curr_dir;
								
								newLine.style.color = "white";
								newLine.style.whiteSpace = "pre-wrap";
								newLine.style.wordBreak = "break-all";
								newLine.style.margin = "0px 10px 0px 10px";
								newLine.style.display = "inline-block";
								// Set content
								
								newLine.innerHTML = `<div>gor@Gors-MacBook-Pro-3 ${curr_dir == "gor" ? "~" : curr_dir} %${commandText}</div>`;

								historyContainer.insertBefore(newLine, terminal_input.parentElement);

								if(curr_dir != "gor"){
									curr_dir =  parent_map.get(curr_dir);
								}

								// Reset input
								terminal_input.textContent = " ";
								terminal_input.dataset.prompt = `gor@Gors-MacBook-Pro-3 ${curr_dir == "gor" ? "~" : curr_dir} % `;
								// Scroll to bottom if needed
								historyContainer.scrollTop = historyContainer.scrollHeight;
								
							}
							else if(commandTrimAll[0] == "cd" && hold.has(commandTrimAll[1]) && commandTrimAll.length == 2){
								console.log("cd and directory")
								addToHistory(commandText, commandTrimAll, historyContainer, terminal_input)
							}
							else if(commandTrimAll[0] == "cd" && commandTrimAll.length == 1){
								console.log("only cd")
								curr_dir = "gor";
								addToHistory(commandText, commandTrimAll, historyContainer, terminal_input)
							}else{

								
									
								newLine.style.color = "white";
								newLine.style.whiteSpace = "pre-wrap";
								newLine.style.wordBreak = "break-all";
								newLine.style.margin = "0px 10px 0px 10px";
								newLine.style.display = "inline-block";
								// Set content
								newLine.innerHTML = `<div>gor@Gors-MacBook-Pro-3 ${curr_dir == "gor" ? "~" : curr_dir} % zsh: command not found: ${commandText}</div>`;

								historyContainer.insertBefore(newLine, terminal_input.parentElement);

								// Reset input
								terminal_input.textContent = " ";

								// Scroll to bottom if needed
								historyContainer.scrollTop = historyContainer.scrollHeight;
							}
						}
						terminal_input.focus();
						const range = document.createRange();
						range.selectNodeContents(terminal_input);
						range.collapse(false); // false = move to end

						const selection = window.getSelection();
						if (selection) {
							selection.removeAllRanges();
							selection.addRange(range);
						}
						event.preventDefault();
						break;
					case "Delete":
						if(terminal_input.textContent == ""){
							event.preventDefault();
						}
						break;
					default:
						// terminal_input.textContent = " " + terminal_input.textContent; 
						if(terminal_input.textContent == ""){
							terminal_input.textContent += " ";
						}
        		return; // Quit when this doesn't handle the key event.
				}
				// Cancel the default action to avoid it being handled twice
			},
			true,
		);
</script>

<style>
	#mydiv {
		position: absolute;
		z-index: 9;
		background-color: transparent;
		top: 45%;
		left: 70%;
		transform: translate(-50%, -50%);
	}

	#mydivheader {
		position: relative;
		cursor: move;
		z-index: 10;
		width: 100%;
		height: 50px;
		border: none;
		background-color: white;
		display: flex;
		justify-content: space-between;
		align-items: center;
		display: none;
		border-top-left-radius: 15px;
		border-top-right-radius: 15px;
	}
	html, body {
    /* overflow: hidden; */
    overscroll-behavior: none;
  }
	.content {
  	overflow-y: auto;           /* Enable vertical scrolling */
		position: relative;
		display: flex;
		width: 100%;
		height: 100%;
		flex-direction: column;
	}
	.navbar{
		font-family: "Bayon";
		display: flex;
		width: 100%;
		margin-top: 20px;
		margin-bottom: 20px;
		gap: 20px;
		justify-content: end;
		align-items: center;
		/* background-color: black; */
	}
	.end {
		margin-right: 35px;
	}
	.nav_item {
		color: white;
		font-size: x-large;
	}
	.title {
		font-family: "Bayon";
		align-self: center;
		line-height: 125px;
		font-size: 10.5em;
		color: white;
	}
	.position {
		font-family: "Bayon";
		align-self: center;
		font-size: 2.5em;
		margin-top: 20px;
		color: white;
	}
	.content .inner{
		width: 100%;
		height: 100%;
		margin-top: 50px;
		margin-bottom: 50px;
		margin-left: 35px;
		position: relative;
		/* background-color: grey; */
	}
	.intro{
		align-self: center;
		font-size: 3.5em;
		color: white;
	}
	.inner .instructions{
		font-size: 2em;
		color: white;
	}
	.row{
		display: flex;
		flex-direction: row;
		/* background-color: brown; */
	}
	.col{
		display: flex;
		flex-direction: column;
	}
	.row{
		display: flex;
		flex-direction: row;
		/* background-color: brown; */
	}
	.directory_container{
		margin-top: 20px;
		display: flex;
		flex-direction: row;
		background-color: bl;
	}
	.directory{
		display: flex;
		font-size: 2em;
		color: white;
		align-items: center;
		width: fit-content;
		border-bottom: 2.5px solid white;
	}
	.right_arrow{
		width: 50px;
	}
	.directory:link{
		text-decoration: none;
	}
	.nav_item:link{
		text-decoration: none;
	}
	.line{
		width: 2.5px;
		flex-shrink: 0;       /* prevents shrinking in flex layouts */
		background-color: white;
		margin-left: 5px;
	}
	.line2{
		width: 2.5px;
		flex-shrink: 0;       /* prevents shrinking in flex layouts */
		background-color: white;
		margin-left: 5px;
	}
	.project_overview_container{
		display: none;
		margin-left: 55px;
	}
	.project_overview{
		margin-top: 20px;
		font-size: 24px;
		color: white;
		width: 50vw;
	}
	.inside{
		align-self: flex-start;
		margin-left: 50px;
	}
	.lvl1{
		display: none;
	}
	.lvl2{
		display: none;
	}
	.top{
		margin-top: 50px;
	}
	.terminal_container{
		display: none;
		width: 150px;
		height: 100px;
		background-color: #323232;
		z-index: 10;
		border-bottom-left-radius: 20px;
		border-bottom-right-radius: 20px;
		border-bottom: 2.5px solid white;
		border-left: 2.5px solid white;
		border-right: 2.5px solid white;
		transition: all 0.3s ease-in-out;
		cursor: move;
	}
	.header{
		z-index: 15;
		width: 100%;
		height: 50px;
		background-color: white;
		border-top-left-radius: 15px;
		border-top-right-radius: 15px;
		display: flex;
		justify-content: space-between;
		align-items: center;

	}
	.minimize_button{
		display: none;
		margin-left: 10px;
		width: 20px;
		height: 20px;
		background-color: #FFDD00;
		border-radius: 50px;
	}
	.space{
		width: 40px;
		height: 40px;
		margin-right: 5px;
	}
	.terminal_title{
		display: none;
	}
	.terminal_inner{
		display: none;
		height: 100%;
		width: 100%;
	}
	.console_container{
		display: flex;
		align-items: start;
		flex-direction: column;
		overflow:scroll;
		height: 450px;
		width: 100%;
	}
	.terminal_line{
		width: 100%;
	}
	.matches{
		position: fixed;
		width: 100px;
		height: 150px;
		display: none;
		flex-direction: column;
		/* right: 0;
		top: 35px; */
		margin-top: 10px;
		background-color: black;
		z-index: 50;
	}
	.input {
		outline: none;
		white-space: pre-wrap;
		word-break: break-all;
		caret-color: white;
		color: white;
		display: inline-block;
		margin: 0px 10px 0px 10px;
		
	}
	.history{
		outline: none;
		white-space: pre-wrap;
		word-break: break-all;
		caret-color: white;
		color: white;
		min-height: 1em;
		margin: 10px;
	}
	.input::before {
		content: attr(data-prompt);
		white-space: pre;
		color: white;
	}
	.minimized_terminal{
		width: 100px;
		height: 100px;
		position: fixed;
		background-color: #323232;
		z-index: 15;
		bottom: 20px;
		right: 20px;
		border: 2.5px solid white;
		border-radius: 15px;
		background-color: #323232;

		transition: all 0.3s ease-in-out;
	}
	.folder_icon {
		margin-left: 10px;
		width: 3rem;
		height: 3rem;
		background-image: url("../assets/folder.svg");
		background-size: cover;
		transition: background-image 0.3s ease-in-out;
	}
	.folder_icon:hover {
		background-image: url("../assets/folder_yellow.svg");
	}
	.circle {
		margin-left: 10px;
		width: 2rem;
		height: 2rem;
		background-image: url("../assets/circle.svg");
		background-size: cover;
		transition: background-image 0.3s ease-in-out;
	}
	.circle:hover {
		background-image: url("../assets/circle.svg");
	}

	#container {
		font-family: "Oswald";
		background-image: url("../assets/background.png");
		/* background-position: center; */
		background-repeat: no-repeat;
		background-size: cover;
		background-attachment: fixed; /* ✅ Keeps background stationary */
		height: 100vh;
	}


	@media (max-width: 800px) {
		.title {			
			font-size: 7em;
			line-height: 75px;
		}
		.position{
			margin-top: 10px;
			font-size: 2em;
		}
  }
	
	
</style>
