---
import { projects } from "../components/data.astro"; // if external; or define above
---



<div id="container">
	<div class = "content">
		<div class="navbar">
			<a class="nav_item" target = "_blank" href="https://drive.google.com/file/d/1ABNumKgpDbWP7AUFDB4uL7UODojpNrFE/view?usp=sharing"> 
				Resume
			</a>
			<a class="nav_item" target = "_blank" href="https://github.com/Gkhech"> 
				Github
			</a>
			<a class="nav_item" target = "_blank" href="https://www.linkedin.com/in/gor-khechyan-912a4821a/"> 
				Linkedin
			</a>
			<a class="nav_item end" href="/about"> 
				About
			</a>
		</div>
		<div class="title" >Gor_Khechyan</div>
		<div class="position" >Software_Engineer</div>
		
		<div class="inner_container">
		<div class="inner"> 
			<div class="intro">
				Welcome to my portfolio :)
			</div>
			<div class="instructions">
				Click on the directories below or use the terminal
			</div>


			<div class="directory top" data-folder="closed"> 
				gors_desktop <div id = "gors_desktop" class="folder_icon folder" data-folder="closed" />
			</div>
		
			<div class="row" data-folder="closed">
				<div class="line"> 
				</div>
				<div class="col">
					
						<div class = "directory_container lvl1" id="lvl1_top" data-folder="closed"> 
							<img class="right_arrow" src="/assets/right_arrow.svg" alt="right arrow" />
							<div class="directory"> 
								personal_projects <div id = "personal_projects" class="folder_icon folder" data-folder="closed" />
							</div>
						</div>
						
						<div class="row inside lvl2 " data-folder="closed">
							<div class="line2"> 
							</div>
							<div class="col">
								{projects.map((project) => (
									<>
										<div class="directory_container" id={project.id === 'plant_dad' ? 'top' : project.id === 'open_street_maps' ? 'bottom' : undefined}> 
											<img class="right_arrow" src="/assets/right_arrow.svg" alt="right arrow" />
											<div class="directory"> 
												{project.filename}
												<div class="folder_icon folder" data-folder="closed" />
											</div>											
										</div>

										<div class="project_overview_container" id={project.id}>
											<div class="project_overview">tech_stack : {project.tech_stack}</div>
											<div class="project_overview">project_overview : {project.overview}</div>
										</div>
									</>
								))}
							</div>
						</div>

					<!-- <div class = "directory_container lvl1"  data-folder="closed"> 
					<img class="right_arrow" src="/assets/right_arrow.svg" alt="right arrow" />
						<div class="directory"> 
							client_work <div id = "personal_projects" class="folder_icon folder" data-folder="closed" />
						</div>
					</div> -->

					<div class = "directory_container lvl1" id="lvl1_bottom" data-folder="closed"> 
						<img class="right_arrow" src="/assets/right_arrow.svg" alt="right arrow" />
						<a class = "directory" target = "_blank" href="https://drive.google.com/file/d/1ABNumKgpDbWP7AUFDB4uL7UODojpNrFE/view?usp=sharing"> 
							resume <div class="circle" />
						</a>	
					</div>
					
					
				</div>
			</div>

			<div id="mydiv">
				<div id="mydivheader">
					<div class = "terminal_title"> gors -- zsh </div>
				</div>
				<div class = "terminal_container">
					<div class = "terminal_inner"> 
						<div class = "console_container">					
							<div class="terminal_line">
								<div class="input" contenteditable="false" spellcheck="false" data-prompt="gor@Gors-MacBook-Pro-3 ~ % "></div>
							</div>
						</div>
					</div>
				</div>
				
			</div>

			<div class="minimized_terminal">
				<div class="terminal_logo" />
			</div> 

		</div>
		</div>
	</div>
	<div class="matches"></div>
</div>




<script>
	import { file_map } from "./data.astro";

	interface ParentAndChild{
		parent: string,
		children: Map<string, ParentAndChild>,
	}


	let curr_dir = "gor";
	let matches: any = document.querySelector<HTMLElement>('.matches');


	const personal_projects_map: Map<string, ParentAndChild> = new Map();
	personal_projects_map.set("plant_dad.txt", {parent: "personal_projects", children: new Map()});
	personal_projects_map.set("uic_api.txt", {parent: "personal_projects", children: new Map()});
	personal_projects_map.set("word_game.txt", {parent: "personal_projects", children: new Map()});
	personal_projects_map.set("assembly_language_interpreter.txt", {parent: "personal_projects", children: new Map()});
	personal_projects_map.set("open_street_maps.txt", {parent: "personal_projects", children: new Map()});
	
	const resume_map: Map<string, ParentAndChild> = new Map();

	const gors_desktop_map:  Map<string, ParentAndChild> = new Map()
	gors_desktop_map.set("personal_projects", {parent: "gors_desktop", children: personal_projects_map});
	gors_desktop_map.set("resume", {parent: "gors_desktop", children: resume_map});

	const gor_map:  Map<string, ParentAndChild> = new Map()
	gor_map.set("gors_desktop", {parent: "gor", children: gors_desktop_map});
		
	const tree: Map<string, ParentAndChild> = new Map();
	tree.set("gor", {parent: "/", children: gor_map})

	const parent_map = new Map();
	parent_map.set("gor", "");
	parent_map.set("gors_desktop", "gor");
	parent_map.set("personal_projects", "gors_desktop");
	parent_map.set("resume", "gors_desktop");

	parent_map.set("plant_dad.txt", "personal_projects");
	parent_map.set("uic_api.txt", "personal_projects");
	parent_map.set("word_game.txt", "personal_projects");
	parent_map.set("assembly_language_interpreter.txt", "personal_projects");
	parent_map.set("open_street_maps.txt", "personal_projects");

	const elements = [
		"gor", 
		"gors_desktop",
		"personal_projects",
		"resume",
		"plant_dad.txt",
		"uic_api.txt",
		"word_game.txt",
		"assembly_language_interpreter.txt",
		"open_street_maps.txt"
	]

	function calcLine2(){
		let lineExtension = 46.5;
		if(contentInnerWidth <= 450){
			lineExtension -= 20.5;
		}
		const lvl2 = document.querySelector<HTMLElement>(".lvl2");
		if(lvl2){
		const plantDad = lvl2.querySelector("#top");
			const open_street_maps = lvl2.querySelector("#bottom")
			if (plantDad && open_street_maps) {
				const rect = plantDad.getBoundingClientRect();
				const yPosition = rect.top + window.scrollY;

				const rect2 = open_street_maps.getBoundingClientRect();
				const yPosition2 = rect2.top + window.scrollY;
				const line2 = document.querySelector<HTMLElement>(".line2");
				if(line2){
					line2.style.height = `${(yPosition2 - yPosition) + lineExtension}px`;
				}
			}
		}
	}

	function calcLine1(lineExtension: number){
		if(contentInnerWidth <= 450 && lineExtension != 0){
			lineExtension -= 14.5;
		}
		const top = document.getElementById("lvl1_top");
		const bottom = document.getElementById("lvl1_bottom")
		if (top && bottom) {
			const rect = top.getBoundingClientRect();
			const yPosition = rect.top + window.scrollY;

			const rect2 = bottom.getBoundingClientRect();
			const yPosition2 = rect2.top + window.scrollY;
			const line2 = document.querySelector<HTMLElement>(".line");
			if(line2){
				line2.style.height = `${(yPosition2 - yPosition) + lineExtension}px`;
			}
		}
	}

	function toggleFolder(folder: HTMLElement | null){
		if(folder){
			if(folder.dataset.folder == "closed"){
				folder.classList.remove("folder_icon");
				folder.classList.add("folder_icon_open");
	
				folder.dataset.folder = "open";
			}else{
				folder.classList.remove("folder_icon_open");
				folder.classList.add("folder_icon");

				folder.dataset.folder = "closed";
			}
		}
	}


	document.querySelectorAll<HTMLElement>(".directory_container")?.forEach((ele) => {
		ele.addEventListener('click', (e) => {
			const proj_overview_container = ele.nextElementSibling as HTMLElement; 
			toggleFolder(ele.querySelector<HTMLElement>(".folder"));

			if (proj_overview_container?.classList.contains("project_overview_container")) {//validate
				if (proj_overview_container) {
					proj_overview_container.style.display = (proj_overview_container.style.display === "none" || !proj_overview_container.style.display) ? "block" : "none";
				}
			}
			calcLine2();
			calcLine1(40.5);
		});
	})

	function getCaretCoordinates(): { x: number; y: number } | null {
		const selection = window.getSelection();
		if (!selection || selection.rangeCount === 0) return null;

		const range = selection.getRangeAt(0).cloneRange();
		range.collapse(true);

		const rects = range.getClientRects();
		if (rects.length === 0) return null;

		const rect = rects[0];
		return { x: rect.left, y: rect.top };
	}

	
	

	dragElement(document.getElementById("mydiv")!);

	let contentInnerWidth: number;

	function updateContentInnerWidth(){
		contentInnerWidth = window.innerWidth;
		calcLine2();
		document.querySelector<HTMLElement>(".folder")?.dataset.folder != "open" ?
			calcLine1(0)
		:
			calcLine1(40.5);
	}

	let i = 1;
	matches.addEventListener("focusin", (e: any) => {

		if(matches){
			const size = matches.childElementCount;
				matches.onkeydown = function(event: any) {						
					if(event.key == "ArrowDown") {
						if(i >= size) return
						i += 1;
					}
					
					if(event.key == "ArrowUp") {
						if(i <= 1) return
						i  -= 1;
					}

					const curr_button = document.getElementById(`${i}`);
					if(curr_button){
						curr_button?.focus();	
					}

					if(event.key == "Escape" || event.key == "Esc") {
						event.preventDefault();
						const input_div = document.querySelector<HTMLElement>('.input');
						if(input_div){
							input_div.focus();
							matches.style.display = "none";
						}
					}

					if(event.key == "Enter"){
						event.preventDefault();
						const input_div = document.querySelector<HTMLElement>('.input');
						const commandText = input_div?.innerHTML;
						const commandTextSplit = commandText?.split(" ");
						commandTextSplit![commandTextSplit!.length - 1] = document.getElementById(`${i}`)?.innerHTML || " ";
						input_div!.innerHTML = commandTextSplit!.join(" ");
					
						// Move cursor to end -- logic
							input_div!.focus();
							const range = document.createRange();
							range.selectNodeContents(input_div!);
							range.collapse(false); // set the carot to the end of the range after the end

							const selection = window.getSelection();
							if (selection) {
								selection.removeAllRanges();
								selection.addRange(range);
							}
						//

						matches.style.display = "none";

					}
				};
				
			}
		});


	window.addEventListener('DOMContentLoaded', (e: any) => {
		
		// Select the node that will be observed for mutations
		const targetNode = document.querySelector<HTMLElement>(".input");
		
		if (targetNode) {
			targetNode.addEventListener("input", () => {
				const caret = getCaretCoordinates();
				if (caret) {
					const matches = document.querySelector<HTMLElement>(".matches");
					if (matches) {
						matches.style.left = `${caret.x + window.scrollX}px`;
						matches.style.top = `${caret.y + 20 + window.scrollY}px`; // 20px offset to appear below caret
					}

				}
			});
		}
		});

	updateContentInnerWidth();
	
	window.addEventListener("resize", updateContentInnerWidth);

	function dragElement(elmnt: HTMLElement) {
		let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;

		const header = document.getElementById(elmnt.id + "header");
		const dragTarget = header || elmnt;

		// Bind both mouse and touch events
		dragTarget.onmousedown = dragMouseDown;
		dragTarget.ontouchstart = dragTouchStart;

		function dragMouseDown(e: MouseEvent) {
			e.preventDefault();
			pos3 = e.clientX;
			pos4 = e.clientY;

			document.onmouseup = closeDragElement;
			document.onmousemove = elementDragMouse;
		}

		function dragTouchStart(e: TouchEvent) {
			if (e.touches.length > 1) return; // ignore multi-touch
			e.preventDefault();
			pos3 = e.touches[0].clientX;
			pos4 = e.touches[0].clientY;

			document.ontouchend = closeDragElement;
			document.ontouchmove = elementDragTouch;
		}

		function elementDragMouse(e: MouseEvent) {
			handleDrag(e.clientX, e.clientY);
		}

		function elementDragTouch(e: TouchEvent) {
			if (e.touches.length > 1) return;
			handleDrag(e.touches[0].clientX, e.touches[0].clientY);
		}

		function handleDrag(clientX: number, clientY: number) {
			// const matches = document.querySelector<HTMLElement>(".matches");
			// matches!.style.display = "none";

			pos1 = pos3 - clientX;
			pos2 = pos4 - clientY;
			pos3 = clientX;
			pos4 = clientY;

			const content = document.querySelector<HTMLElement>(".content"); // Adjust if needed
			const contentWidth = content?.clientWidth || window.innerWidth;
			const contentHeight = content?.scrollHeight || window.innerHeight;

			const nextLeft = elmnt.offsetLeft - pos1;
			const nextTop = elmnt.offsetTop - pos2;

			// Apply constraints
			if (nextLeft >= 0 && nextLeft <= contentWidth - 75) {
				elmnt.style.left = `${nextLeft}px`;
			}
			if (nextTop >= 0 && nextTop <= contentHeight - 50) {
				elmnt.style.top = `${nextTop}px`;
			}
	}

	function closeDragElement() {
		document.onmouseup = null;
		document.onmousemove = null;
		document.ontouchend = null;
		document.ontouchmove = null;
	}
}



		function closeLvl1v2(gors_desktop_folder: HTMLElement, lvl1: NodeListOf<HTMLElement>, folder_icon: NodeListOf<HTMLElement>){
			folder_icon?.forEach((folder) => {
				folder.classList.remove("folder_icon_open");
				folder.classList.add("folder_icon");
				folder.dataset.folder = "closed";
			})

			lvl1.forEach((ele) => {
				ele.setAttribute("style", "display: none !important;") 	
			});	

			gors_desktop_folder.dataset.folder = "closed";
			gors_desktop_folder.classList.remove("folder_icon_open");
			gors_desktop_folder.classList.add("folder_icon");
			
			calcLine1(0);
	}

	function openLvl1v2(){

		const gors_desktop_folder = document.querySelector<HTMLElement>("#gors_desktop");
	
		const lvl2 = document.querySelector<HTMLElement>('.lvl2');

		const lvl1 = document.querySelectorAll<HTMLElement>('.lvl1');
		
		
		if(lvl1 && gors_desktop_folder){
			lvl1.forEach((ele) => {
				ele.setAttribute("style", "display: flex !important;") 
			});	

			gors_desktop_folder.dataset.folder = "open";
		
				gors_desktop_folder.classList.remove("folder_icon");
				gors_desktop_folder.classList.add("folder_icon_open");
			
			calcLine1(40.5);
		}
	}



	function toggleLvl1(){
		const gors_desktop_folder = document.querySelector<HTMLElement>("#gors_desktop");
	
		const lvl2 = document.querySelector<HTMLElement>('.lvl2');

		

		const folder_icon = document.querySelectorAll<HTMLElement>('.folder');
		const lvl1 = document.querySelectorAll<HTMLElement>('.lvl1');
		
		
		if(lvl1 && gors_desktop_folder){
			if(gors_desktop_folder.dataset.folder == "closed" || gors_desktop_folder.dataset.folder == "selected"){
				openLvl1v2()
			}else{
				closeLvl1v2(gors_desktop_folder, lvl1, folder_icon)
				if(lvl2){
					closelvl2v2(lvl2);
				}
			}
		}
	}

	document.querySelector('.directory.top')?.addEventListener('click', () => {
		toggleLvl1();//open first so we can calc distance
	});

	function closelvl2v2(inside: HTMLElement){
		
		inside.setAttribute("style", "display: none !important")
		document.querySelectorAll<HTMLElement>(".directory_container")?.forEach((ele) => {
			const proj_overview_container = ele.nextElementSibling as HTMLElement; // .directory_hold
			
			const folder = ele.querySelector<HTMLElement>(".folder");
			if(folder){
				folder.classList.remove("folder_icon_open");
				folder.classList.add("folder_icon");
				folder.dataset.folder = "closed";
			}
		
			if (proj_overview_container?.classList.contains("project_overview_container")) {//validate
				if (proj_overview_container) {
					proj_overview_container.style.display = "none";
				}
			}
		})
		inside.dataset.folder = "closed";
		calcLine2();		
	}

	function openlvl2v2(inside: HTMLElement){
		inside.setAttribute("style", "display: flex !important")
		inside.dataset.folder = "open";
		calcLine2();		
	}

	function toggleLvl2(){
		const inside = document.querySelector<HTMLElement>('.lvl2');
					
		if(inside){	
			if(inside.dataset.folder == "closed"){
				openlvl2v2(inside);
			}
			else{
				closelvl2v2(inside);
			}
		}	
	}
	let minimized = true;

	const lvl1 = document.querySelector('.lvl1');
	lvl1?.addEventListener('click', () => {
    // const inside = document.querySelector('.inside');
		toggleLvl2()
		calcLine1(40.5);
  });
		

		
		const terminal_input = document.querySelector<HTMLElement>('.input');

		const mydiv = document.querySelector<HTMLElement>('#mydiv');
		const terminal_container = document.querySelector<HTMLElement>('.terminal_container');
		const terminal_inner = terminal_container?.querySelector<HTMLElement>('.terminal_inner')
		const terminal_title = document.querySelector<HTMLElement>(".terminal_title");
		const minimized_header = document.getElementById('mydivheader');
		const minimized_terminal = document.querySelector<HTMLElement>('.minimized_terminal');
		const content = document.querySelector<HTMLElement>(".content"); // Adjust if needed

		minimized_terminal?.addEventListener('click', () => {
			if(terminal_container && minimized_header && terminal_inner && terminal_title && mydiv){
				if(minimized){
						terminal_container.style.display = "flex";
						terminal_inner.style.display = "block";
						terminal_container.style.width = "600px";
						terminal_container.style.height = "450px";
						mydiv.style.left = `${(window.innerWidth / 2)}px`
						mydiv.style.top = `${(content!.scrollHeight / 2) - 200}px`
						minimized_header.style.width = "100%";
						minimized_header.style.height = "50px";
						minimized_header.style.backgroundColor = "white";
						minimized_header.style.display = "flex";
						terminal_title.style.display = "block";
						terminal_container.style.transition = "all 0.3s ease-in-out";
						minimized = false;

				}else{
					terminal_inner.style.display = "none";
					terminal_container.style.display = "none";
					minimized_header.style.display = "none";
					minimized_header.style.width = "150px";
					minimized_header.style.height = "150px";
					terminal_title.style.display = "none";
					minimized = true;
				}
			}
			
		});


		const header = document.getElementById('mydivheader');
	


		terminal_input?.addEventListener("focus", (e) => {
			if(terminal_input && terminal_input.textContent == ""){
				terminal_input.textContent = " ";
			}
		});

	

		window.addEventListener('DOMContentLoaded', () => {
		const inputEl = document.querySelector('.input');//i donrt even know if this si hlping
		if (inputEl && terminal_input) {//to ensure prev content doesnt get erased
			terminal_input.textContent = " ";//this seem to have fix the inital issue wher i could delete all the spaces
			inputEl.setAttribute('contenteditable', 'true');
			
		}
	});

		function traverse(): Map<string, ParentAndChild>{
			let hold: Map<string, ParentAndChild> = tree;
			let current_map;
			const queue = [];
			queue.push(tree);
			let size = 1;
			while(queue.length != 0){
				size = queue.length;
				for(let i = 0; i < size; i++){
					current_map = queue.pop();
					if(current_map?.size == 0) continue;

					for (const [key, value] of current_map!.entries()) {
						if (key === curr_dir) {
							return value.children; // ✅ now exits traverse
						}
						queue.unshift(value.children);
					}
				}
				

			}

			return hold;
		}
	

		// case "ArrowDown":
		// event.preventDefault();
		let commandTextSplit: string[] = [];
		const newLine = document.createElement("div");

		function returnAllElementStartWith(input: string): string[] {
			return elements.filter((ele) => 
				ele.startsWith(input)
			)
		}

		function addToHistory(commandText: string, commandTrimAll: string[], historyContainer: HTMLElement, terminal_input: HTMLElement){
			const newLine = document.createElement("div");

			newLine.style.color = "white";
			newLine.style.whiteSpace = "pre-wrap";
			newLine.style.wordBreak = "break-all";
			newLine.style.margin = "0px 10px 0px 10px";
			newLine.style.display = "inline-block";
			// Set content
			
			newLine.innerHTML = `<div>gor@Gors-MacBook-Pro-3 ${curr_dir == "gor" ? "~" : curr_dir} %${commandText}</div>`;

			historyContainer.insertBefore(newLine, terminal_input.parentElement);

			curr_dir = commandTrimAll[commandTrimAll.length - 1];

			// Reset input
			terminal_input.textContent = " ";
			terminal_input.dataset.prompt = `gor@Gors-MacBook-Pro-3 ${curr_dir == "gor" ? "~" : curr_dir} % `;
			// Scroll to bottom if needed
			historyContainer.scrollTop = historyContainer.scrollHeight;
		}

		terminal_input?.addEventListener(
			"keydown",
			(event) => {
				if (event.defaultPrevented) {
					return; // Do nothing if the event was already processed
				}

				if (event.metaKey) {
					event.preventDefault();
					return;
				}

				switch (event.key) {						
					case "Meta":
						event.preventDefault();
						return
					case "Tab"://this is our autocomplete
						const commandText = terminal_input.textContent || " ";//the bare input text
						let commandTrimStart = commandText.trimStart().split(" ");//the input text without any white space at the start and split
						let commandTrimAll = commandText.trim().split(" ");//the input text without any white space and split

						commandTrimAll = commandTrimAll.filter((ele) => {
							if(ele != "") return ele
						})


						if(commandTrimAll.length == 1 && commandTrimStart.length == 1){
							//we have just cd or ls no leading spaces
						}
						else if(commandTrimStart.length >= 1 && (commandTrimStart[0] == "cd" || commandTrimStart[0] == "cat") ){//changed to >= 1 instead of == 1
							//there are leading spaces 
							let command = "";
							command = commandTrimStart[1];
							

							
							for (const [index, value] of commandTrimStart.entries()) {
								if(index == 0) continue;
								if(value != ""){
									command = commandTrimStart.slice(index).join(",");
									break;
								}
							}
												

							const hold: Map<string, ParentAndChild> = traverse();//returns the child of a key that matches our current directory 

							const allElementsStartWith: string[] = returnAllElementStartWith(command);
							
							let filtered: string[] = [];
							if(commandTrimStart[0] == "cd"){
								filtered = allElementsStartWith.filter((ele) => {
									if(hold.has(ele) && !ele.endsWith(".txt")){
										return ele;
									}
								})
							}else if(commandTrimStart[0] == "cat"){
								filtered = allElementsStartWith.filter((ele) => {
									if(hold.has(ele) && ele.endsWith(".txt")){
										return ele;
									}
								})
							}

							
							if(filtered.length >= 1){
								const children: HTMLElement[] = filtered.map((ele , index) => {
									const autocomplete_option_div = document.createElement("button");
									autocomplete_option_div.id = `${index + 1}`
									autocomplete_option_div.style.width = "100%"
									autocomplete_option_div.style.textAlign = "left"
									autocomplete_option_div.style.overflow = "hidden"
									autocomplete_option_div.style.backgroundColor = "transparent"
									autocomplete_option_div.style.color = "white"
									autocomplete_option_div.style.fontFamily = "Oswald"
									
									autocomplete_option_div.innerHTML = ele;
									return autocomplete_option_div;
								});

								matches = document.querySelector<HTMLElement>('.matches');
								if (matches) {
									matches.replaceChildren();
									children.forEach(child => matches.appendChild(child));
									matches.style.display = "flex";
								}

								const button = matches?.querySelector("button");

								if(button){
									setTimeout(() => {
										button?.focus();
									}, 0);
								}
							}
						}
						
						event.preventDefault();
						break;
					case "Enter":
						const historyContainer = document.querySelector<HTMLElement>('.console_container');

						if (historyContainer && terminal_input) {
							//! prev issue 
							//!If you're using Astro, Next.js, or a framework that scopes CSS using data-* attributes (like your data-astro-cid-...), 
							//!then dynamically added elements do not automatically get those scoped attributes.

							const commandText = terminal_input.textContent || " ";
							const commandTrimStart = commandText.trimStart().split(" ");
							let commandTrimAll = commandText.trim().split(" ");

							const newLine = document.createElement("div");

							const hold: Map<string, ParentAndChild> = traverse();//returns the child of a key that matches our current directory 
							
							commandTrimAll = commandTrimAll.filter((ele) => {
								if(ele != "") return ele
							})

							if(commandTrimAll.length == 1 && commandTrimAll[0] == "ls"){
								newLine.style.color = "white";
								newLine.style.whiteSpace = "pre-wrap";
								newLine.style.wordBreak = "break-all";
								newLine.style.margin = "0px 10px 0px 10px";
								newLine.style.display = "inline-block";

								// Set content
								
								newLine.innerHTML = `<div>gor@Gors-MacBook-Pro-3 ${curr_dir == "gor" ? "~" : curr_dir} %${commandText}</div>`;
							
								historyContainer.insertBefore(newLine, terminal_input.parentElement);

								for (const [key, value] of hold!.entries()) {
									
									const newDiv = document.createElement("span");
									newDiv.innerHTML = key;
									newDiv.style.color = "#FF98EA";
									newDiv.style.whiteSpace = "pre-wrap";
									newDiv.style.wordBreak = "break-all";
									newDiv.style.margin = "0px 10px 0px 10px";
									newDiv.style.display = "inline-block";
									historyContainer.insertBefore(newDiv, terminal_input.parentElement);
								}

								// Reset input
								terminal_input.textContent = " ";
								terminal_input.dataset.prompt = `gor@Gors-MacBook-Pro-3 ${curr_dir == "gor" ? "~" : curr_dir} % `;
								// Scroll to bottom if needed
								historyContainer.scrollTop = historyContainer.scrollHeight;
							}
							else if(commandTrimAll[0] == "cat" && hold.has(commandTrimAll[1]) && commandTrimAll[1].endsWith(".txt") && file_map.has(commandTrimAll[1]) && commandTrimAll.length == 2){
								newLine.style.color = "white";
								newLine.style.whiteSpace = "pre-wrap";
								newLine.style.wordBreak = "break-all";
								newLine.style.margin = "0px 10px 0px 10px";
								newLine.style.display = "inline-block";

								// Set content
								
								newLine.innerHTML = `<div>gor@Gors-MacBook-Pro-3 ${curr_dir == "gor" ? "~" : curr_dir} %${commandText}</div>`;
								const project_tech_stack_div = document.createElement("div");
								const project_overview_div = document.createElement("div");
								
								project_tech_stack_div.innerHTML = `
									<div>${file_map.get(commandTrimAll[1])?.tech_stack}</div>
								`;

								project_overview_div.innerHTML = `
									<div>${file_map.get(commandTrimAll[1])?.project_overview}</div>
								`;

								Object.assign(project_tech_stack_div.style, {
									color: "#FF98EA",
									whiteSpace: "normal",
									wordBreak: "break-word",
									display: "block",
									width: "85%",
									margin: "0 auto", // ✅ centers the div
									marginBottom: "10px",
									marginTop: "10px",
								});

								Object.assign(project_overview_div.style, {
									color: "#FF98EA",
									whiteSpace: "normal",
									wordBreak: "break-word",
									display: "block",
									width: "85%",
									margin: "0 auto", // ✅ centers the div
									marginBottom: "10px",
								});
								

								historyContainer.insertBefore(newLine, terminal_input.parentElement);
								historyContainer.insertBefore(project_tech_stack_div, terminal_input.parentElement);
								historyContainer.insertBefore(project_overview_div, terminal_input.parentElement);


								// Reset input
								terminal_input.textContent = " ";
								terminal_input.dataset.prompt = `gor@Gors-MacBook-Pro-3 ${curr_dir == "gor" ? "~" : curr_dir} % `;
								// Scroll to bottom if needed
								historyContainer.scrollTop = historyContainer.scrollHeight;
							}
							else if(commandTrimAll[0] == "cd" && commandTrimAll[1] == ".."){
								
								newLine.style.color = "white";
								newLine.style.whiteSpace = "pre-wrap";
								newLine.style.wordBreak = "break-all";
								newLine.style.margin = "0px 10px 0px 10px";
								newLine.style.display = "inline-block";
								// Set content
								
								newLine.innerHTML = `<div>gor@Gors-MacBook-Pro-3 ${curr_dir == "gor" ? "~" : curr_dir} %${commandText}</div>`;

								historyContainer.insertBefore(newLine, terminal_input.parentElement);

								if(curr_dir != "gor"){
									curr_dir =  parent_map.get(curr_dir);
								}

								// Reset input
								terminal_input.textContent = " ";
								terminal_input.dataset.prompt = `gor@Gors-MacBook-Pro-3 ${curr_dir == "gor" ? "~" : curr_dir} % `;
								// Scroll to bottom if needed
								historyContainer.scrollTop = historyContainer.scrollHeight;
								
							}
							else if(commandTrimAll[0] == "cd" && hold.has(commandTrimAll[1]) && commandTrimAll.length == 2){
								addToHistory(commandText, commandTrimAll, historyContainer, terminal_input)
							}
							else if(commandTrimAll[0] == "cd" && commandTrimAll.length == 1){
								
								const newLine = document.createElement("div");

								newLine.style.color = "white";
								newLine.style.whiteSpace = "pre-wrap";
								newLine.style.wordBreak = "break-all";
								newLine.style.margin = "0px 10px 0px 10px";
								newLine.style.display = "inline-block";
								// Set content
								
								newLine.innerHTML = `<div>gor@Gors-MacBook-Pro-3 ${curr_dir == "gor" ? "~" : curr_dir} %${commandText}</div>`;

								historyContainer.insertBefore(newLine, terminal_input.parentElement);

								curr_dir = "gor";

								// Reset input
								terminal_input.textContent = " ";
								terminal_input.dataset.prompt = `gor@Gors-MacBook-Pro-3 ~ %`;
								// Scroll to bottom if needed
								historyContainer.scrollTop = historyContainer.scrollHeight;
							}else{

								
									
								newLine.style.color = "white";
								newLine.style.whiteSpace = "pre-wrap";
								newLine.style.wordBreak = "break-all";
								newLine.style.margin = "0px 10px 0px 10px";
								newLine.style.display = "inline-block";
								// Set content
								newLine.innerHTML = `<div>gor@Gors-MacBook-Pro-3 ${curr_dir == "gor" ? "~" : curr_dir} % zsh: command not found: ${commandText}</div>`;

								historyContainer.insertBefore(newLine, terminal_input.parentElement);

								// Reset input
								terminal_input.textContent = " ";

								// Scroll to bottom if needed
								historyContainer.scrollTop = historyContainer.scrollHeight;
							}
						}
						terminal_input.focus();
						const range = document.createRange();
						range.selectNodeContents(terminal_input);
						range.collapse(false); // false = move to end

						const selection = window.getSelection();
						if (selection) {
							selection.removeAllRanges();
							selection.addRange(range);
						}
						event.preventDefault();
						break;
					case "Delete":
						if(terminal_input.textContent == ""){
							event.preventDefault();
						}
						break;
					default:
						// terminal_input.textContent = " " + terminal_input.textContent; 
						if(terminal_input.textContent == ""){
							terminal_input.textContent += " ";
						}
        		return; // Quit when this doesn't handle the key event.
				}
				// Cancel the default action to avoid it being handled twice
			},
			true,
		);
</script>


<style>
	#mydiv {
		position: absolute;
		z-index: 9;
		background-color: transparent;
		top: 45%;
		left: 70%;
		transform: translate(-50%, -50%);
	}

	#mydivheader {
		position: relative;
		cursor: move;
		z-index: 10;
		width: 100%;
		height: 50px;
		border: none;
		background-color: white;
		display: flex;
		justify-content: center;
		align-items: center;
		display: none;
		border-top-left-radius: 15px;
		border-top-right-radius: 15px;
	}
	.content {
  	overflow-y: auto;           /* Enable vertical scrolling */
		position: relative;
		display: flex;
		width: 100%;
		height: 100%;
		flex-direction: column;
		animation: page-load 300ms ease-in;
	}
		@keyframes page-load {
		0% {
			opacity: 0;
		}

		100%{
			opacity: 1;
		}
	}
	.navbar{
		font-family: "Bayon";
		display: flex;
		width: 100%;
		margin-top: 20px;
		margin-bottom: 20px;
		gap: 20px;
		justify-content: end;
		align-items: center;
		z-index: 25;
		/* background-color: black; */
	}
	.end {
		margin-right: 35px;
	}
	.nav_item {
		color: white;
		font-size: x-large;
	}
	.title {
		font-family: "Bayon";
		align-self: center;
		line-height: 50px;
		font-size: 6.5em;
		color: white;
	}
	.position {
		font-family: "Bayon";
		align-self: center;
		font-size: 2em;
		margin-top: 20px;
		color: white;
	}
	.content .inner{
		/* width: 100%;
		height: 100%;
		margin-top: 25px;
		margin-bottom: 50px; */
		margin-left: 35px;
		/* background-color: grey; */
	}
	.inner_container{
		position: relative;
		width: 100%;
		height: 100%;
		margin-top: 25px;
		margin-bottom: 50px;
	}
	.intro{
		align-self: center;
		font-size: 2em;
		color: white;
	}
	.inner .instructions{
		font-size: 1.25em;
		color: white;
	}
	.row{
		display: flex;
		flex-direction: row;
		/* background-color: brown; */
	}
	.col{
		display: flex;
		flex-direction: column;
	}
	.row{
		display: flex;
		flex-direction: row;
		/* background-color: brown; */
	}
	.directory_container{
		margin-top: 20px;
		display: flex;
		flex-direction: row;
	}
	.directory{
		display: flex;
		font-size: 1.5em;
		color: white;
		align-items: center;
		width: fit-content;
		border-bottom: 2.5px solid white;
	}
	.right_arrow{
		width: 35px;
	}
	.directory:link{
		text-decoration: none;
	}
	.nav_item:link{
		text-decoration: none;
	}
	.line{
		width: 2.5px;
		flex-shrink: 0;       /* prevents shrinking in flex layouts */
		background-color: white;
		margin-left: 5px;
	}
	.line2{
		width: 2.5px;
		flex-shrink: 0;       /* prevents shrinking in flex layouts */
		background-color: white;
		margin-left: 5px;
	}
	.project_overview_container{
		display: none;
		margin-left: 55px;
	}
	.project_overview{
		margin-top: 20px;
		font-size: 1.25em;
		color: white;
		width: 50vw;
	}
	.inside{
		align-self: flex-start;
		margin-left: 50px;
	}
	.lvl1{
		display: none;
	}
	.lvl2{
		display: none;
	}
	.top{
		margin-top: 25px;
	}
	.terminal_container{
		display: none;
		width: 150px;
		height: 100px;
		background-color: #323232;
		z-index: 10;
		border-bottom-left-radius: 20px;
		border-bottom-right-radius: 20px;
		border-bottom: 2.5px solid white;
		border-left: 2.5px solid white;
		border-right: 2.5px solid white;
		transition: all 0.3s ease-in-out;
		cursor: move;
	}
	.header{
		z-index: 15;
		width: 100%;
		height: 25px;
		background-color: white;
		border-top-left-radius: 15px;
		border-top-right-radius: 15px;
		display: flex;
		justify-content: space-between;
		align-items: center;

	}
	.terminal_title{
		display: none;
	}
	.terminal_inner{
		display: none;
		height: 100%;
		width: 100%;
	}
	.console_container{
		display: flex;
		align-items: start;
		flex-direction: column;
		overflow: scroll;
		height: 90%;
		width: 100%;
	}
	.terminal_line{
		width: 100%;
	}
	.matches{
		font-family: "Oswald";
		position: fixed;
		width: 100px;
		height: fit-content;
		display: none;
		flex-direction: column;
		width: 150px;
		margin-top: 10px;
		background-color: black;
		z-index: 50;
	}
	.input {
		outline: none;
		white-space: pre-wrap;
		word-break: break-all;
		caret-color: white;
		color: white;
		display: inline-block;
		margin: 0px 10px 0px 10px;
		
	}
	.history{
		outline: none;
		white-space: pre-wrap;
		word-break: break-all;
		caret-color: white;
		color: white;
		min-height: 1em;
		margin: 10px;
	}
	.input::before {
		content: attr(data-prompt);
		white-space: pre;
		color: white;
	}
	.minimized_terminal{
		width: 100px;
		height: 100px;
		position: fixed;
		z-index: 15;
		bottom: 20px;
		right: 20px;
		border: 2.5px solid white;
		border-radius: 15px;
		background-color: #323232;

		transition: all 0.3s ease-in-out;
	}
	.folder_icon {
		margin-left: 10px;
		width: 3rem;
		height: 3rem;
		background-image: url("/assets/folder.svg");
		background-size: cover;
		transition: background-image 0.3s ease-in-out;
	}

	.folder_icon_open {
		margin-left: 10px;
		width: 3rem;
		height: 3rem;
		background-image: url("/assets/open_folder_yellow.svg");
		background-size: cover;
		transition: background-image 0.3s ease-in-out;
	}
	.folder_icon:hover {
		background-image: url("/assets/folder_yellow.svg");
	}
	.circle {
		margin-left: 10px;
		width: 2rem;
		height: 2rem;
		background-image: url("/assets/circle.svg");
		background-size: cover;
		transition: background-image 0.3s ease-in-out;
	}
	#container {
		font-family: "Oswald";
		background-image: url("/assets/background.png");
		/* background-position: center; */
		background-repeat: no-repeat;
		background-size: cover;
		background-attachment: fixed; /* ✅ Keeps background stationary */
		height: 100vh;
	}
	.terminal_logo{
		width: 2rem;
		height: 2rem;
		background-image: url("/assets/terminal.svg");
		z-index: 20;
		background-repeat: no-repeat;
		background-size: contain;       /* ←❗ this ensures the SVG fits the container */
		margin-top: 15px;
		margin-left: 10px;
		align-self: flex-start;
	}
	button:focus {
		outline: 2px solid white !important; /* your color */
	}

	@media (max-width: 800px) {
		.title {			
			font-size: 5.5em;
			line-height: 50px;
		}
		.position{
			margin-top: 10px;
			font-size: 2em;
		}
		.terminal_container{
			width: 400px !important;;
			height: 300px !important;;
		}

		.navbar{
			justify-content: center;
		}
    .end{
			margin-right: 0px;
		}
  }

	@media (max-width: 450px) {
		body{
			margin-left: 0;
			margin-right: 0;
		}
		.title {			
			font-size: 4em;
			line-height: 50px;
		}
		.position{
			margin-top: 10px;
			font-size: 2em;
		}
		.terminal_container{
			width: 350px !important;;
			height: 300px !important;;
		}

		.inner .instructions{
			font-size: 1.15em;
			color: white;
		}

		/* .project_overview_container{
			display: none;
			margin-left: 55px;
		} */
		
		.project_overview{
			margin-top: 10px;
			font-size: 1.0em;
		}

		.directory_container{
			margin-top: 10px;
		}
		.directory{
			font-size: 1.15em;
		}

		.inside{
			align-self: flex-start;
			margin-left: 50px;
		}
		.content .inner{
			margin-left: 35px;
		}
		
		.folder_icon, .folder_icon_open{
			margin-left: 5px;
			width: 1.5rem;
			height: 1.5rem;
		}

		.circle {
			margin-left: 5px;
			width: 1rem;
			height: 1rem;
		}

		.content .inner{
			margin-left: 10px;
		}

		.minimized_terminal{
			width: 75px;
			height: 75px;	
		}

		#container {		
			background-position: 10% center; /* 👈 shifts image to the left */
		}
	}
</style>
